from flask import Flask, request, jsonify
from flask_cors import CORS
from clarifai_grpc.channel.clarifai_channel import ClarifaiChannel
from clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc
from clarifai_grpc.grpc.api.status import status_code_pb2
from openai import OpenAI
import base64
import uuid
import os
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
CORS(app)

# API Keys
CLARIFAI_PAT = os.getenv("CLARIFAI_PAT")
CLARIFAI_USER_ID = os.getenv("CLARIFAI_USER_ID")
CLARIFAI_APP_ID = os.getenv("CLARIFAI_APP_ID")
CLARIFAI_WORKFLOW_ID = os.getenv("CLARIFAI_WORKFLOW_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)

channel = ClarifaiChannel.get_grpc_channel()
stub = service_pb2_grpc.V2Stub(channel)
metadata = (("authorization", "Key " + CLARIFAI_PAT),)

conversations = {}
user_profiles = {}

SYSTEM_PROMPT = """B·∫°n l√† chuy√™n gia dinh d∆∞·ª°ng AI th√¢n thi·ªán c·ªßa Vi·ªát Nam.

NHI·ªÜM V·ª§:
ü•ó T∆∞ v·∫•n dinh d∆∞·ª°ng v√† m√≥n ƒÉn Vi·ªát
üìä Ph√¢n t√≠ch th√†nh ph·∫ßn dinh d∆∞·ª°ng
üçΩÔ∏è G·ª£i √Ω th·ª±c ƒë∆°n l√†nh m·∫°nh, ph√π h·ª£p ng∆∞·ªùi Vi·ªát
üí™ H·ªó tr·ª£ c√°c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe (ti·ªÉu ƒë∆∞·ªùng, b√©o ph√¨, tim m·∫°ch...)

PHONG C√ÅCH:
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu
- S·ª≠ d·ª•ng emoji ph√π h·ª£p
- ∆Øu ti√™n m√≥n ƒÉn Vi·ªát Nam
- Khuy·∫øn kh√≠ch l·ªëi s·ªëng l√†nh m·∫°nh"""


def recognize_food_with_clarifai(image_base64):
    """Nh·∫≠n di·ªán m√≥n ƒÉn b·∫±ng Clarifai Workflow"""
    try:
        if ',' in image_base64:
            image_base64 = image_base64.split(',')[1]
        
        image_bytes = base64.b64decode(image_base64)
        
        userDataObject = resources_pb2.UserAppIDSet(
            user_id=CLARIFAI_USER_ID,
            app_id=CLARIFAI_APP_ID
        )
        
        post_workflow_response = stub.PostWorkflowResults(
            service_pb2.PostWorkflowResultsRequest(
                user_app_id=userDataObject,
                workflow_id=CLARIFAI_WORKFLOW_ID,
                inputs=[
                    resources_pb2.Input(
                        data=resources_pb2.Data(
                            image=resources_pb2.Image(base64=image_bytes)
                        )
                    )
                ]
            ),
            metadata=metadata
        )
        
        if post_workflow_response.status.code != status_code_pb2.SUCCESS:
            raise Exception(f"Clarifai Error: {post_workflow_response.status.description}")
        
        results = post_workflow_response.results[0]
        detected_foods = []
        
        for output in results.outputs:
            if output.data.concepts:
                for concept in output.data.concepts:
                    if concept.value > 0.5:
                        detected_foods.append({
                            "name": concept.name,
                            "confidence": round(concept.value * 100, 2)
                        })
        
        seen = set()
        unique_foods = []
        for f in detected_foods:
            if f["name"] not in seen:
                unique_foods.append(f)
                seen.add(f["name"])
        
        return unique_foods
        
    except Exception as e:
        print(f"‚ùå L·ªói Clarifai: {str(e)}")
        return []


def call_openai_vision(prompt, images, max_tokens=1500):
    """G·ªçi OpenAI GPT-4 Vision"""
    try:
        content = [{"type": "text", "text": prompt}]
        
        for img in images:
            if ',' in img:
                img = img.split(',')[1]
            if not img.startswith('data:image'):
                img = f"data:image/jpeg;base64,{img}"
            
            content.append({
                "type": "image_url",
                "image_url": {"url": img, "detail": "high"}
            })
        
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": content}],
            max_tokens=max_tokens,
            temperature=0.7
        )
        
        return response.choices[0].message.content.strip()
        
    except Exception as e:
        raise Exception(f"OpenAI Vision Error: {str(e)}")


def call_openai_text(prompt, model="gpt-4o", max_tokens=1500):
    """G·ªçi OpenAI text completion"""
    try:
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": prompt}
            ],
            max_tokens=max_tokens,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        raise Exception(f"OpenAI API error: {str(e)}")


@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({
        "status": "OK",
        "message": "Food Recognition API is running!",
        "endpoints": [
            "/api/chat",
            "/api/analyze-food",
            "/api/compare-foods",
            "/api/track-calories",
            "/api/quick-scan",
            "/api/meal-suggestion",
            "/api/weekly-menu",
            "/api/detailed-recipes",
            "/api/user/profile"
        ]
    }), 200


@app.route('/api/chat', methods=['POST'])
def chat():
    """Chat v·ªõi AI dinh d∆∞·ª°ng"""
    try:
        data = request.json
        message = data.get("message", "").strip()
        session_id = data.get("session_id", str(uuid.uuid4()))
        
        if not message:
            return jsonify({"error": "Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"}), 400
        
        if session_id not in conversations:
            conversations[session_id] = []
        
        history = conversations[session_id]
        messages = [{"role": "system", "content": SYSTEM_PROMPT}]
        messages.extend(history[-10:])
        messages.append({"role": "user", "content": message})
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            max_tokens=1500,
            temperature=0.7
        )
        
        bot_reply = response.choices[0].message.content.strip()
        
        history.append({"role": "user", "content": message})
        history.append({"role": "assistant", "content": bot_reply})
        
        return jsonify({
            "reply": bot_reply,
            "session_id": session_id
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/analyze-food', methods=['POST'])
def analyze_food():
    """Ph√¢n t√≠ch m√≥n ƒÉn t·ª´ ·∫£nh (Clarifai + OpenAI)"""
    try:
        data = request.json
        image_base64 = data.get("image")
        health_condition = data.get("health_condition", "kh·ªèe m·∫°nh")
        dietary_goals = data.get("dietary_goals", "duy tr√¨ c√¢n n·∫∑ng")
        
        if not image_base64:
            return jsonify({"error": "Ch∆∞a c√≥ ·∫£nh"}), 400
        
        detected_foods = recognize_food_with_clarifai(image_base64)
        
        if not detected_foods:
            return jsonify({
                "error": "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c m√≥n ƒÉn",
                "suggestion": "Vui l√≤ng ch·ª•p ·∫£nh r√µ h∆°n ho·∫∑c th·ª≠ ·∫£nh kh√°c"
            }), 400
        
        food_list = ", ".join([f"{f['name']} ({f['confidence']}%)" for f in detected_foods])
        
        prompt = f"""
B·∫°n l√† chuy√™n gia dinh d∆∞·ª°ng. Ph√¢n t√≠ch m√≥n ƒÉn n√†y cho ng∆∞·ªùi {health_condition}, m·ª•c ti√™u {dietary_goals}.

**M√≥n ƒÉn ƒë√£ nh·∫≠n di·ªán b·ªüi AI:** {food_list}

H√£y ph√¢n t√≠ch chi ti·∫øt theo c·∫•u tr√∫c sau:

## 1. üçΩÔ∏è X√ÅC NH·∫¨N M√ìN ƒÇN
- Ki·ªÉm tra v√† x√°c nh·∫≠n c√°c m√≥n ƒë√£ nh·∫≠n di·ªán
- B·ªï sung th√¥ng tin v·ªÅ c√°ch ch·∫ø bi·∫øn, kh·∫©u ph·∫ßn

## 2. üìä TH√îNG TIN DINH D∆Ø·ª†NG
- **Calo**: [X] kcal (cho 1 ph·∫ßn)
- **Protein**: [X]g
- **Carbohydrate**: [X]g (trong ƒë√≥ ƒë∆∞·ªùng: [Y]g)
- **Ch·∫•t b√©o**: [X]g (b√£o h√≤a: [Y]g)
- **Ch·∫•t x∆°**: [X]g
- **Vitamin & Kho√°ng ch·∫•t**: C√°c ch·∫•t n·ªïi b·∫≠t

## 3. ‚≠ê ƒê√ÅNH GI√Å PH√ô H·ª¢P
- **M·ª©c ƒë·ªô**: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (1-5 sao)
- **Ph√π h·ª£p v·ªõi ng∆∞·ªùi {health_condition}**: C√≥/Kh√¥ng
- **Ph√π h·ª£p v·ªõi m·ª•c ti√™u {dietary_goals}**: C√≥/Kh√¥ng
- **Gi·∫£i th√≠ch**: T·∫°i sao?

## 4. ‚úÖ ∆ØU ƒêI·ªÇM
- ƒêi·ªÉm m·∫°nh v·ªÅ dinh d∆∞·ª°ng
- L·ª£i √≠ch s·ª©c kh·ªèe

## 5. ‚ö†Ô∏è NH∆Ø·ª¢C ƒêI·ªÇM
- ƒêi·ªÉm c·∫ßn l∆∞u √Ω
- R·ªßi ro v·ªõi ng∆∞·ªùi {health_condition}

## 6. üí° G·ª¢I √ù C·∫¢I THI·ªÜN
- C√°ch ƒÉn t·ªët h∆°n (gi·∫£m calo, tƒÉng dinh d∆∞·ª°ng)
- M√≥n thay th·∫ø ph√π h·ª£p h∆°n
- L·ªùi khuy√™n cho ng∆∞·ªùi {health_condition}

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn, th·ª±c t·∫ø, d·ªÖ hi·ªÉu. D√πng emoji ph√π h·ª£p.
"""
        
        analysis = call_openai_vision(prompt, [image_base64], max_tokens=2000)
        
        return jsonify({
            "success": True,
            "detected_foods": detected_foods,
            "analysis": analysis,
            "health_condition": health_condition,
            "dietary_goals": dietary_goals
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/compare-foods', methods=['POST'])
def compare_foods():
    """So s√°nh nhi·ªÅu m√≥n ƒÉn"""
    try:
        data = request.json
        images = data.get("images", [])
        health_condition = data.get("health_condition", "kh·ªèe m·∫°nh")
        
        if not images or len(images) < 2:
            return jsonify({"error": "C·∫ßn √≠t nh·∫•t 2 ·∫£nh ƒë·ªÉ so s√°nh"}), 400
        
        all_detected_foods = []
        for idx, image in enumerate(images):
            foods = recognize_food_with_clarifai(image)
            all_detected_foods.append({
                "dish_number": idx + 1,
                "foods": foods
            })
        
        dishes_summary = ""
        for dish in all_detected_foods:
            food_names = ", ".join([f['name'] for f in dish['foods']])
            dishes_summary += f"\n- M√≥n {dish['dish_number']}: {food_names}"
        
        prompt = f"""
B·∫°n l√† chuy√™n gia dinh d∆∞·ª°ng. So s√°nh {len(images)} m√≥n ƒÉn cho ng∆∞·ªùi {health_condition}.

**C√°c m√≥n ƒë√£ nh·∫≠n di·ªán:**{dishes_summary}

H√£y so s√°nh chi ti·∫øt theo c·∫•u tr√∫c:

## 1. üçΩÔ∏è X√ÅC NH·∫¨N C√ÅC M√ìN
Li·ªát k√™ v√† m√¥ t·∫£ ng·∫Øn g·ªçn t·ª´ng m√≥n

## 2. üìä B·∫¢NG SO S√ÅNH DINH D∆Ø·ª†NG

| M√≥n | Calo | Protein | Carb | Fat | Ch·∫•t x∆° | ƒêi·ªÉm |
|-----|------|---------|------|-----|---------|------|
| M√≥n 1 | X kcal | Xg | Xg | Xg | Xg | ‚≠ê‚≠ê‚≠ê‚≠ê |
| M√≥n 2 | X kcal | Xg | Xg | Xg | Xg | ‚≠ê‚≠ê‚≠ê |
| ... | ... | ... | ... | ... | ... | ... |

## 3. üèÜ X·∫æP H·∫†NG (T·ª´ t·ªët ‚Üí k√©m)
1. ü•á **M√≥n X**: [T√™n m√≥n] - [L√Ω do chi ti·∫øt]
2. ü•à **M√≥n Y**: [T√™n m√≥n] - [L√Ω do chi ti·∫øt]
3. ü•â **M√≥n Z**: [T√™n m√≥n] - [L√Ω do chi ti·∫øt]

## 4. üí° KHUY·∫æN NGH·ªä
- **N√™n ch·ªçn**: M√≥n n√†o v√† t·∫°i sao?
- **Tr√°nh**: M√≥n n√†o n·∫øu c√≥ {health_condition}?
- **L∆∞u √Ω**: ƒêi·ªÉm c·∫ßn ch√∫ √Ω khi ƒÉn

## 5. ‚ö†Ô∏è C·∫¢NH B√ÅO ƒê·∫∂C BI·ªÜT
- M√≥n n√†o kh√¥ng ph√π h·ª£p v·ªõi ng∆∞·ªùi {health_condition}
- L√Ω do c·ª• th·ªÉ

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, r√µ r√†ng, c√≥ emoji, d·ªÖ ƒë·ªçc.
"""
        
        comparison = call_openai_vision(prompt, images, max_tokens=2500)
        
        return jsonify({
            "success": True,
            "detected_foods": all_detected_foods,
            "comparison": comparison,
            "total_foods": len(images),
            "health_condition": health_condition
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/track-calories', methods=['POST'])
def track_calories():
    """Theo d√µi calo trong ng√†y"""
    try:
        data = request.json
        images = data.get("images", [])
        target_calories = data.get("target_calories", 2000)
        health_condition = data.get("health_condition", "kh·ªèe m·∫°nh")
        
        if not images:
            return jsonify({"error": "Ch∆∞a c√≥ ·∫£nh b·ªØa ƒÉn"}), 400
        
        daily_meals = []
        meal_names = ["S√°ng", "Tr∆∞a", "T·ªëi", "Ph·ª•"]
        
        for idx, image in enumerate(images):
            meal_name = meal_names[idx] if idx < len(meal_names) else f"B·ªØa {idx + 1}"
            foods = recognize_food_with_clarifai(image)
            daily_meals.append({
                "meal_number": idx + 1,
                "meal_name": f"B·ªØa {meal_name}",
                "foods": foods
            })
        
        meals_summary = ""
        for meal in daily_meals:
            food_names = ", ".join([f['name'] for f in meal['foods']])
            meals_summary += f"\n- {meal['meal_name']}: {food_names}"
        
        prompt = f"""
B·∫°n l√† chuy√™n gia dinh d∆∞·ª°ng. Theo d√µi calo cho ng∆∞·ªùi {health_condition}.

**C√°c b·ªØa ƒÉn h√¥m nay:**{meals_summary}

**M·ª•c ti√™u h√†ng ng√†y:** {target_calories} kcal

Ph√¢n t√≠ch chi ti·∫øt theo c·∫•u tr√∫c:

## 1. üçΩÔ∏è CHI TI·∫æT T·ª™NG B·ªÆA

### B·ªØa S√°ng
- **M√≥n**: [Li·ªát k√™ m√≥n]
- **Calo**: [X] kcal
- **ƒê√°nh gi√°**: ‚≠ê‚≠ê‚≠ê‚≠ê (1-5 sao)

### B·ªØa Tr∆∞a
- **M√≥n**: [Li·ªát k√™ m√≥n]
- **Calo**: [X] kcal
- **ƒê√°nh gi√°**: ‚≠ê‚≠ê‚≠ê‚≠ê

### B·ªØa T·ªëi
- **M√≥n**: [Li·ªát k√™ m√≥n]
- **Calo**: [X] kcal
- **ƒê√°nh gi√°**: ‚≠ê‚≠ê‚≠ê

## 2. üìä T·ªîNG H·ª¢P
```
üìä T·ªîNG CALO: [X] kcal
üéØ M·ª§C TI√äU:  {target_calories} kcal
üìà CH√äNH L·ªÜCH: [+/-Y] kcal ([Z]%)
```

**Tr·∫°ng th√°i**: 
- ‚úÖ ƒê·∫°t m·ª•c ti√™u
- ‚ö†Ô∏è Th·ª´a X kcal  
- üî¥ Thi·∫øu X kcal

## 3. ü•ó PH√ÇN B·ªê DINH D∆Ø·ª†NG

- **Protein**: [X]g ([Y]% t·ªïng calo)
- **Carbs**: [X]g ([Y]% t·ªïng calo)
- **Fat**: [X]g ([Y]% t·ªïng calo)
- **Ch·∫•t x∆°**: [X]g

**Bi·ªÉu ƒë·ªì ph√¢n b·ªë:**
```
Protein: [‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 30%
Carbs:   [‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë] 50%
Fat:     [‚ñì‚ñì‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 20%
```

## 4. üíØ ƒê√ÅNH GI√Å T·ªîNG TH·ªÇ

- üòä T·ªët / üòê Ch·∫•p nh·∫≠n ƒë∆∞·ª£c / üòü C·∫ßn ƒëi·ªÅu ch·ªânh
- **L√Ω do**: [Gi·∫£i th√≠ch chi ti·∫øt]
- **ƒêi·ªÉm m·∫°nh**: [G√¨ t·ªët]
- **ƒêi·ªÉm y·∫øu**: [G√¨ c·∫ßn c·∫£i thi·ªán]

## 5. üí° G·ª¢I √ù

### N·∫øu THI·∫æU calo:
- M√≥n n√™n ƒÉn th√™m: [G·ª£i √Ω c·ª• th·ªÉ]
- Th·ªùi ƒëi·ªÉm n√™n ƒÉn: [Bu·ªïi n√†o]

### N·∫øu TH·ª™A calo:
- C√°ch ƒëi·ªÅu ch·ªânh b·ªØa sau
- B·ªØa n√†o n√™n gi·∫£m l∆∞·ª£ng

### C√¢n b·∫±ng dinh d∆∞·ª°ng:
- Thi·∫øu/th·ª´a ch·∫•t g√¨
- C√°ch b·ªï sung

## 6. üìà TI·∫æN ƒê·ªò H√îM NAY
```
ƒê√£ ƒÉn:    [‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñë‚ñë‚ñë] X%
C√≤n l·∫°i:  [Y] kcal
```

**K·∫ø ho·∫°ch b·ªØa ti·∫øp theo**: [G·ª£i √Ω]

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, k√®m emoji, d·ªÖ hi·ªÉu, th·ª±c t·∫ø.
"""
        
        tracking = call_openai_vision(prompt, images, max_tokens=3000)
        
        return jsonify({
            "success": True,
            "daily_meals": daily_meals,
            "tracking": tracking,
            "target_calories": target_calories,
            "meals_count": len(images),
            "health_condition": health_condition
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/quick-scan', methods=['POST'])
def quick_scan():
    """Qu√©t nhanh m√≥n ƒÉn - ch·ªâ d√πng Clarifai"""
    try:
        data = request.json
        image_base64 = data.get("image")
        
        if not image_base64:
            return jsonify({"error": "Ch∆∞a c√≥ ·∫£nh"}), 400
        
        detected_foods = recognize_food_with_clarifai(image_base64)
        
        if not detected_foods:
            return jsonify({
                "error": "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c m√≥n ƒÉn",
                "suggestion": "Vui l√≤ng ch·ª•p ·∫£nh r√µ h∆°n"
            }), 400
        
        return jsonify({
            "success": True,
            "detected_foods": detected_foods,
            "total": len(detected_foods)
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/meal-suggestion', methods=['POST'])
def meal_suggestion():
    """G·ª£i √Ω m√≥n ƒÉn cho 1 b·ªØa"""
    try:
        data = request.json
        health_condition = data.get("health_condition", "kh·ªèe m·∫°nh")
        dietary_preferences = data.get("dietary_preferences", "kh√¥ng")
        budget_range = data.get("budget_range", "100k")
        cooking_time = data.get("cooking_time", "30 ph√∫t")
        meal_time = data.get("meal_time", "tr∆∞a")
        
        prompt = f"""
G·ª£i √Ω th·ª±c ƒë∆°n b·ªØa {meal_time} cho ng∆∞·ªùi Vi·ªát:
- T√¨nh tr·∫°ng s·ª©c kh·ªèe: {health_condition}
- S·ªü th√≠ch ƒÉn u·ªëng: {dietary_preferences}
- Ng√¢n s√°ch: {budget_range}
- Th·ªùi gian n·∫•u: {cooking_time}

Y√™u c·∫ßu tr·∫£ l·ªùi:
1. 2-3 m√≥n ƒÉn Vi·ªát ph√π h·ª£p
2. L√Ω do ch·ªçn (li√™n quan s·ª©c kh·ªèe)
3. C√°ch ch·∫ø bi·∫øn ƒë∆°n gi·∫£n
4. ƒê·ªì u·ªëng k√®m theo
5. ∆Ø·ªõc t√≠nh calo t·ªïng

Format r√µ r√†ng, d·ªÖ ƒë·ªçc v·ªõi emoji.
"""
        
        result = call_openai_text(prompt, max_tokens=1200)
        
        return jsonify({
            "suggestion": result,
            "meal_time": meal_time
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/weekly-menu', methods=['POST'])
def weekly_menu():
    """T·∫°o th·ª±c ƒë∆°n c·∫£ tu·∫ßn"""
    try:
        data = request.json
        health_condition = data.get("health_condition", "kh·ªèe m·∫°nh")
        dietary_preferences = data.get("dietary_preferences", "kh√¥ng")
        budget_range = data.get("budget_range", "500k")
        cooking_time = data.get("cooking_time", "45 ph√∫t")
        
        prompt = f"""
L·∫≠p th·ª±c ƒë∆°n 7 ng√†y cho ng∆∞·ªùi Vi·ªát:
- S·ª©c kh·ªèe: {health_condition}
- S·ªü th√≠ch: {dietary_preferences}
- Ng√¢n s√°ch m·ªói ng√†y: {budget_range}
- Th·ªùi gian n·∫•u: {cooking_time}

Format theo m·∫´u:
**Th·ª© 2:**
- S√°ng: [m√≥n + calo]
- Tr∆∞a: [m√≥n + calo]
- T·ªëi: [m√≥n + calo]

K√®m theo:
- Danh s√°ch mua s·∫Øm cho c·∫£ tu·∫ßn
- Tips ti·∫øt ki·ªám th·ªùi gian
- T·ªïng calo m·ªói ng√†y
"""
        
        result = call_openai_text(prompt, model="gpt-4o", max_tokens=2500)
        
        return jsonify({
            "menu": result,
            "duration": "7 ng√†y"
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/detailed-recipes', methods=['POST'])
def detailed_recipes():
    """Th·ª±c ƒë∆°n k√®m c√¥ng th·ª©c n·∫•u chi ti·∫øt"""
    try:
        data = request.json
        health_condition = data.get("health_condition", "kh·ªèe m·∫°nh")
        dietary_preferences = data.get("dietary_preferences", "kh√¥ng")
        budget_range = data.get("budget_range", "500k")
        days = data.get("days", 3)
        
        prompt = f"""
T·∫°o th·ª±c ƒë∆°n {days} ng√†y v·ªõi c√¥ng th·ª©c chi ti·∫øt:
- S·ª©c kh·ªèe: {health_condition}
- S·ªü th√≠ch: {dietary_preferences}
- Ng√¢n s√°ch: {budget_range}

M·ªói m√≥n g·ªìm:
1. T√™n m√≥n v√† ·∫£nh minh h·ªça (m√¥ t·∫£)
2. Nguy√™n li·ªáu c·ª• th·ªÉ (kh·ªëi l∆∞·ª£ng)
3. C√°c b∆∞·ªõc l√†m chi ti·∫øt
4. Th·ªùi gian chu·∫©n b·ªã + n·∫•u
5. Calo v√† dinh d∆∞·ª°ng
6. Chi ph√≠ ∆∞·ªõc t√≠nh
7. Tips hay
"""
        
        result = call_openai_text(prompt, model="gpt-4o", max_tokens=3000)
        
        return jsonify({
            "recipes": result,
            "days": days
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/user/profile', methods=['POST'])
def save_user_profile():
    """L∆∞u th√¥ng tin ng∆∞·ªùi d√πng"""
    try:
        data = request.json
        user_id = data.get("user_id", str(uuid.uuid4()))
        
        user_profiles[user_id] = {
            "name": data.get("name"),
            "age": data.get("age"),
            "weight": data.get("weight"),
            "height": data.get("height"),
            "health_condition": data.get("health_condition", "kh·ªèe m·∫°nh"),
            "dietary_preferences": data.get("dietary_preferences", []),
            "allergies": data.get("allergies", []),
            "target_calories": data.get("target_calories", 2000),
            "activity_level": data.get("activity_level", "v·ª´a ph·∫£i")
        }
        
        return jsonify({
            "message": "L∆∞u th√¥ng tin th√†nh c√¥ng",
            "user_id": user_id
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/user/profile/<user_id>', methods=['GET'])
def get_user_profile(user_id):
    """L·∫•y th√¥ng tin ng∆∞·ªùi d√πng"""
    if user_id not in user_profiles:
        return jsonify({"error": "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"}), 404
    
    return jsonify(user_profiles[user_id]), 200


@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Endpoint kh√¥ng t·ªìn t·∫°i"}), 404


@app.errorhandler(500)
def internal_error(error):
    return jsonify({"error": "L·ªói server"}), 500


if __name__ == "__main__":
    app.run(debug=True)