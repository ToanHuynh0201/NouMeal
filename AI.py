from flask import Flask, request, jsonify
from flask_cors import CORS
from clarifai_grpc.channel.clarifai_channel import ClarifaiChannel
from clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc
from clarifai_grpc.grpc.api.status import status_code_pb2
from openai import OpenAI
import base64
import uuid
import os
import json
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
CORS(app)

CLARIFAI_PAT = os.getenv("CLARIFAI_PAT")
CLARIFAI_USER_ID = os.getenv("CLARIFAI_USER_ID")
CLARIFAI_APP_ID = os.getenv("CLARIFAI_APP_ID")
CLARIFAI_WORKFLOW_ID = os.getenv("CLARIFAI_WORKFLOW_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)

channel = ClarifaiChannel.get_grpc_channel()
stub = service_pb2_grpc.V2Stub(channel)
metadata = (("authorization", "Key " + CLARIFAI_PAT),)

conversations = {}
user_profiles = {}

AGENT_SYSTEM_PROMPT = """B·∫°n l√† AI Agent dinh d∆∞·ª°ng th√¥ng minh c·ªßa Vi·ªát Nam v·ªõi kh·∫£ nƒÉng:

ü§ñ NHI·ªÜM V·ª§ CH√çNH:
- Ph√¢n t√≠ch √Ω ƒë·ªãnh ng∆∞·ªùi d√πng t·ª´ c√¢u h·ªèi/y√™u c·∫ßu
- T·ª± ƒë·ªông g·ª£i √Ω ch·ª©c nƒÉng ph√π h·ª£p nh·∫•t
- Th·ª±c hi·ªán nhi·ªÅu t√°c v·ª• li√™n ti·∫øp n·∫øu c·∫ßn
- H·ªçc t·ª´ ng·ªØ c·∫£nh h·ªôi tho·∫°i

üéØ C√ÅC CH·ª®C NƒÇNG KH·∫¢ D·ª§NG:
1. analyze_food - Ph√¢n t√≠ch m√≥n ƒÉn t·ª´ ·∫£nh
2. compare_foods - So s√°nh nhi·ªÅu m√≥n ƒÉn
3. track_calories - Theo d√µi calo trong ng√†y
4. quick_scan - Qu√©t nhanh nh·∫≠n di·ªán m√≥n
5. meal_suggestion - G·ª£i √Ω m√≥n cho 1 b·ªØa
6. weekly_menu - L·∫≠p th·ª±c ƒë∆°n tu·∫ßn
7. detailed_recipes - C√¥ng th·ª©c n·∫•u chi ti·∫øt
8. chat - T∆∞ v·∫•n t·ª± do

üìã QUY T·∫ÆC PH√ÇN T√çCH √ù ƒê·ªäNH:
- N·∫øu c√≥ ·∫£nh ‚Üí ∆∞u ti√™n analyze_food ho·∫∑c quick_scan
- N·∫øu nhi·ªÅu ·∫£nh ‚Üí compare_foods ho·∫∑c track_calories
- N·∫øu h·ªèi v·ªÅ th·ª±c ƒë∆°n ‚Üí meal_suggestion ho·∫∑c weekly_menu
- N·∫øu h·ªèi c√¥ng th·ª©c ‚Üí detailed_recipes
- N·∫øu chat th√¥ng th∆∞·ªùng ‚Üí chat

üîÑ KH·∫¢ NƒÇNG T·ª∞ ƒê·ªòNG:
- Ph√°t hi·ªán thi·∫øu th√¥ng tin v√† h·ªèi l·∫°i
- G·ª£i √Ω b∆∞·ªõc ti·∫øp theo sau m·ªói t√°c v·ª•
- K·∫øt h·ª£p nhi·ªÅu ch·ª©c nƒÉng n·∫øu ph√π h·ª£p
- H·ªçc preferences ng∆∞·ªùi d√πng

üí° PHONG C√ÅCH:
- Th√¢n thi·ªán, ch·ªß ƒë·ªông g·ª£i √Ω
- Gi·∫£i th√≠ch l√Ω do ch·ªçn ch·ª©c nƒÉng
- ƒê∆∞a ra nhi·ªÅu l·ª±a ch·ªçn cho user
- ∆Øu ti√™n m√≥n ƒÉn Vi·ªát Nam"""

AVAILABLE_FUNCTIONS = [
    {
        "name": "analyze_food",
        "description": "Ph√¢n t√≠ch chi ti·∫øt 1 m√≥n ƒÉn t·ª´ ·∫£nh. D√πng khi user g·ª≠i ·∫£nh m√≥n ƒÉn v√† mu·ªën bi·∫øt th√¥ng tin dinh d∆∞·ª°ng, ƒë√°nh gi√° ph√π h·ª£p.",
        "parameters": {
            "type": "object",
            "properties": {
                "image": {"type": "string", "description": "Base64 c·ªßa ·∫£nh m√≥n ƒÉn"},
                "health_condition": {"type": "string", "description": "T√¨nh tr·∫°ng s·ª©c kh·ªèe", "default": "kh·ªèe m·∫°nh"},
                "dietary_goals": {"type": "string", "description": "M·ª•c ti√™u dinh d∆∞·ª°ng", "default": "duy tr√¨ c√¢n n·∫∑ng"}
            },
            "required": ["image"]
        }
    },
    {
        "name": "compare_foods",
        "description": "So s√°nh nhi·ªÅu m√≥n ƒÉn (2-4 m√≥n). D√πng khi user g·ª≠i nhi·ªÅu ·∫£nh v√† mu·ªën bi·∫øt m√≥n n√†o t·ªët h∆°n.",
        "parameters": {
            "type": "object",
            "properties": {
                "images": {"type": "array", "items": {"type": "string"}, "description": "M·∫£ng base64 c·ªßa c√°c ·∫£nh"},
                "health_condition": {"type": "string", "description": "T√¨nh tr·∫°ng s·ª©c kh·ªèe", "default": "kh·ªèe m·∫°nh"}
            },
            "required": ["images"]
        }
    },
    {
        "name": "track_calories",
        "description": "Theo d√µi t·ªïng calo trong ng√†y t·ª´ nhi·ªÅu b·ªØa ƒÉn. D√πng khi user mu·ªën ki·ªÉm tra calo ƒë√£ ƒÉn.",
        "parameters": {
            "type": "object",
            "properties": {
                "images": {"type": "array", "items": {"type": "string"}, "description": "·∫¢nh c√°c b·ªØa ƒÉn trong ng√†y"},
                "target_calories": {"type": "integer", "description": "M·ª•c ti√™u calo/ng√†y", "default": 2000},
                "health_condition": {"type": "string", "description": "T√¨nh tr·∫°ng s·ª©c kh·ªèe", "default": "kh·ªèe m·∫°nh"}
            },
            "required": ["images"]
        }
    },
    {
        "name": "quick_scan",
        "description": "Qu√©t nhanh nh·∫≠n di·ªán m√≥n ƒÉn. D√πng khi user ch·ªâ mu·ªën bi·∫øt t√™n m√≥n, kh√¥ng c·∫ßn ph√¢n t√≠ch chi ti·∫øt.",
        "parameters": {
            "type": "object",
            "properties": {
                "image": {"type": "string", "description": "Base64 c·ªßa ·∫£nh m√≥n ƒÉn"}
            },
            "required": ["image"]
        }
    },
    {
        "name": "meal_suggestion",
        "description": "G·ª£i √Ω th·ª±c ƒë∆°n cho 1 b·ªØa ƒÉn. D√πng khi user h·ªèi 'n√™n ƒÉn g√¨', 'g·ª£i √Ω m√≥n cho b·ªØa tr∆∞a'.",
        "parameters": {
            "type": "object",
            "properties": {
                "meal_time": {"type": "string", "description": "B·ªØa n√†o (s√°ng/tr∆∞a/t·ªëi)", "default": "tr∆∞a"},
                "health_condition": {"type": "string", "description": "T√¨nh tr·∫°ng s·ª©c kh·ªèe", "default": "kh·ªèe m·∫°nh"},
                "dietary_preferences": {"type": "string", "description": "S·ªü th√≠ch ƒÉn u·ªëng", "default": "kh√¥ng"},
                "budget_range": {"type": "string", "description": "Ng√¢n s√°ch", "default": "100k"},
                "cooking_time": {"type": "string", "description": "Th·ªùi gian n·∫•u", "default": "30 ph√∫t"}
            }
        }
    },
    {
        "name": "weekly_menu",
        "description": "L·∫≠p th·ª±c ƒë∆°n c·∫£ tu·∫ßn (7 ng√†y). D√πng khi user mu·ªën plan ƒÉn u·ªëng cho nhi·ªÅu ng√†y.",
        "parameters": {
            "type": "object",
            "properties": {
                "health_condition": {"type": "string", "description": "T√¨nh tr·∫°ng s·ª©c kh·ªèe", "default": "kh·ªèe m·∫°nh"},
                "dietary_preferences": {"type": "string", "description": "S·ªü th√≠ch ƒÉn u·ªëng", "default": "kh√¥ng"},
                "budget_range": {"type": "string", "description": "Ng√¢n s√°ch/ng√†y", "default": "500k"},
                "cooking_time": {"type": "string", "description": "Th·ªùi gian n·∫•u", "default": "45 ph√∫t"}
            }
        }
    },
    {
        "name": "detailed_recipes",
        "description": "T·∫°o c√¥ng th·ª©c n·∫•u chi ti·∫øt v·ªõi nguy√™n li·ªáu, b∆∞·ªõc l√†m. D√πng khi user h·ªèi 'l√†m m√≥n X nh∆∞ th·∫ø n√†o'.",
        "parameters": {
            "type": "object",
            "properties": {
                "days": {"type": "integer", "description": "S·ªë ng√†y mu·ªën t·∫°o c√¥ng th·ª©c", "default": 3},
                "health_condition": {"type": "string", "description": "T√¨nh tr·∫°ng s·ª©c kh·ªèe", "default": "kh·ªèe m·∫°nh"},
                "dietary_preferences": {"type": "string", "description": "S·ªü th√≠ch ƒÉn u·ªëng", "default": "kh√¥ng"},
                "budget_range": {"type": "string", "description": "Ng√¢n s√°ch", "default": "500k"}
            }
        }
    }
]


def recognize_food_with_clarifai(image_base64):
    try:
        if ',' in image_base64:
            image_base64 = image_base64.split(',')[1]
        
        image_bytes = base64.b64decode(image_base64)
        
        userDataObject = resources_pb2.UserAppIDSet(
            user_id=CLARIFAI_USER_ID,
            app_id=CLARIFAI_APP_ID
        )
        
        post_workflow_response = stub.PostWorkflowResults(
            service_pb2.PostWorkflowResultsRequest(
                user_app_id=userDataObject,
                workflow_id=CLARIFAI_WORKFLOW_ID,
                inputs=[
                    resources_pb2.Input(
                        data=resources_pb2.Data(
                            image=resources_pb2.Image(base64=image_bytes)
                        )
                    )
                ]
            ),
            metadata=metadata
        )
        
        if post_workflow_response.status.code != status_code_pb2.SUCCESS:
            raise Exception(f"Clarifai Error: {post_workflow_response.status.description}")
        
        results = post_workflow_response.results[0]
        detected_foods = []
        
        for output in results.outputs:
            if output.data.concepts:
                for concept in output.data.concepts:
                    if concept.value > 0.5:
                        detected_foods.append({
                            "name": concept.name,
                            "confidence": round(concept.value * 100, 2)
                        })
        
        seen = set()
        unique_foods = []
        for f in detected_foods:
            if f["name"] not in seen:
                unique_foods.append(f)
                seen.add(f["name"])
        
        return unique_foods
        
    except Exception as e:
        print(f"‚ùå Clarifai Error: {str(e)}")
        return []


def call_openai_vision(prompt, images, max_tokens=1500):
    try:
        content = [{"type": "text", "text": prompt}]
        
        for img in images:
            if ',' in img:
                img = img.split(',')[1]
            if not img.startswith('data:image'):
                img = f"data:image/jpeg;base64,{img}"
            
            content.append({
                "type": "image_url",
                "image_url": {"url": img, "detail": "high"}
            })
        
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": content}],
            max_tokens=max_tokens,
            temperature=0.7
        )
        
        return response.choices[0].message.content.strip()
        
    except Exception as e:
        raise Exception(f"OpenAI Vision Error: {str(e)}")


def call_openai_text(prompt, model="gpt-4o", max_tokens=1500):
    try:
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": AGENT_SYSTEM_PROMPT},
                {"role": "user", "content": prompt}
            ],
            max_tokens=max_tokens,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        raise Exception(f"OpenAI API error: {str(e)}")


def analyze_user_intent(message, images=None, conversation_history=None):
    try:
        context = f"""
Ph√¢n t√≠ch y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng v√† ƒë·ªÅ xu·∫•t ch·ª©c nƒÉng ph√π h·ª£p.

**Tin nh·∫Øn ng∆∞·ªùi d√πng:** {message}
**C√≥ ·∫£nh ƒë√≠nh k√®m:** {"C√≥ " + str(len(images)) + " ·∫£nh" if images else "Kh√¥ng"}
**L·ªãch s·ª≠ h·ªôi tho·∫°i:** {conversation_history[-3:] if conversation_history else "Ch∆∞a c√≥"}

**C√°c ch·ª©c nƒÉng kh·∫£ d·ª•ng:**
{json.dumps([{"name": f["name"], "description": f["description"]} for f in AVAILABLE_FUNCTIONS], ensure_ascii=False, indent=2)}

H√£y tr·∫£ v·ªÅ JSON v·ªõi c·∫•u tr√∫c:
{{
    "intent": "t√™n_function_ph√π_h·ª£p",
    "confidence": 0.0-1.0,
    "suggested_params": {{...}},
    "explanation": "Gi·∫£i th√≠ch ng·∫Øn g·ªçn t·∫°i sao ch·ªçn function n√†y",
    "alternative_actions": ["function_kh√°c_1", "function_kh√°c_2"],
    "missing_info": ["th√¥ng_tin_c·∫ßn_h·ªèi_th√™m"],
    "next_suggestions": ["g·ª£i_√Ω_h√†nh_ƒë·ªông_ti·∫øp_theo"]
}}

V√≠ d·ª•:
- User: "M√≥n n√†y bao nhi√™u calo?" + c√≥ ·∫£nh ‚Üí intent: "analyze_food"
- User: "T√¥i n√™n ƒÉn g√¨ cho b·ªØa tr∆∞a?" ‚Üí intent: "meal_suggestion"
- User: "So s√°nh 2 m√≥n n√†y" + nhi·ªÅu ·∫£nh ‚Üí intent: "compare_foods"
"""
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": AGENT_SYSTEM_PROMPT},
                {"role": "user", "content": context}
            ],
            max_tokens=800,
            temperature=0.3
        )
        
        result_text = response.choices[0].message.content.strip()
        
        if "```json" in result_text:
            result_text = result_text.split("```json")[1].split("```")[0].strip()
        elif "```" in result_text:
            result_text = result_text.split("```")[1].split("```")[0].strip()
        
        intent_result = json.loads(result_text)
        return intent_result
        
    except Exception as e:
        print(f"‚ùå Intent Analysis Error: {str(e)}")
        return {
            "intent": "chat",
            "confidence": 0.5,
            "suggested_params": {},
            "explanation": "Kh√¥ng th·ªÉ ph√¢n t√≠ch √Ω ƒë·ªãnh, chuy·ªÉn sang chat th√¥ng th∆∞·ªùng",
            "alternative_actions": [],
            "missing_info": [],
            "next_suggestions": []
        }


def execute_function(function_name, params):
    try:
        if function_name == "analyze_food":
            return internal_analyze_food(
                params.get("image"),
                params.get("health_condition", "kh·ªèe m·∫°nh"),
                params.get("dietary_goals", "duy tr√¨ c√¢n n·∫∑ng")
            )
        elif function_name == "compare_foods":
            return internal_compare_foods(params.get("images"), params.get("health_condition", "kh·ªèe m·∫°nh"))
        elif function_name == "track_calories":
            return internal_track_calories(
                params.get("images"),
                params.get("target_calories", 2000),
                params.get("health_condition", "kh·ªèe m·∫°nh")
            )
        elif function_name == "quick_scan":
            return internal_quick_scan(params.get("image"))
        elif function_name == "meal_suggestion":
            return internal_meal_suggestion(
                params.get("meal_time", "tr∆∞a"),
                params.get("health_condition", "kh·ªèe m·∫°nh"),
                params.get("dietary_preferences", "kh√¥ng"),
                params.get("budget_range", "100k"),
                params.get("cooking_time", "30 ph√∫t")
            )
        elif function_name == "weekly_menu":
            return internal_weekly_menu(
                params.get("health_condition", "kh·ªèe m·∫°nh"),
                params.get("dietary_preferences", "kh√¥ng"),
                params.get("budget_range", "500k"),
                params.get("cooking_time", "45 ph√∫t")
            )
        elif function_name == "detailed_recipes":
            return internal_detailed_recipes(
                params.get("days", 3),
                params.get("health_condition", "kh·ªèe m·∫°nh"),
                params.get("dietary_preferences", "kh√¥ng"),
                params.get("budget_range", "500k")
            )
        else:
            return {"error": f"Function {function_name} kh√¥ng t·ªìn t·∫°i"}
    except Exception as e:
        return {"error": str(e)}


def internal_analyze_food(image, health_condition, dietary_goals):
    detected_foods = recognize_food_with_clarifai(image)
    if not detected_foods:
        return {"error": "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c m√≥n ƒÉn"}
    
    food_list = ", ".join([f"{f['name']} ({f['confidence']}%)" for f in detected_foods])
    
    prompt = f"""Ph√¢n t√≠ch m√≥n ƒÉn cho ng∆∞·ªùi {health_condition}, m·ª•c ti√™u {dietary_goals}.
M√≥n ƒë√£ nh·∫≠n di·ªán: {food_list}

Tr·∫£ l·ªùi ng·∫Øn g·ªçn:
1. X√°c nh·∫≠n m√≥n ƒÉn
2. Calo v√† dinh d∆∞·ª°ng ch√≠nh
3. ƒê√°nh gi√° ph√π h·ª£p (‚≠ê 1-5)
4. ∆Øu/nh∆∞·ª£c ƒëi·ªÉm
5. G·ª£i √Ω c·∫£i thi·ªán"""
    
    analysis = call_openai_vision(prompt, [image], max_tokens=1500)
    
    return {
        "detected_foods": detected_foods,
        "analysis": analysis,
        "health_condition": health_condition,
        "dietary_goals": dietary_goals
    }


def internal_compare_foods(images, health_condition):
    all_detected = []
    for idx, img in enumerate(images):
        foods = recognize_food_with_clarifai(img)
        all_detected.append({"dish_number": idx + 1, "foods": foods})
    
    dishes_summary = "\n".join([
        f"- M√≥n {d['dish_number']}: {', '.join([f['name'] for f in d['foods']])}"
        for d in all_detected
    ])
    
    prompt = f"""So s√°nh {len(images)} m√≥n ƒÉn cho ng∆∞·ªùi {health_condition}.
C√°c m√≥n: {dishes_summary}

Tr·∫£ v·ªÅ:
1. B·∫£ng so s√°nh calo, protein, carb
2. X·∫øp h·∫°ng t·ª´ t·ªët ‚Üí k√©m
3. Khuy·∫øn ngh·ªã n√™n ch·ªçn m√≥n n√†o"""
    
    comparison = call_openai_vision(prompt, images, max_tokens=2000)
    
    return {
        "detected_foods": all_detected,
        "comparison": comparison,
        "total_foods": len(images)
    }


def internal_track_calories(images, target_calories, health_condition):
    daily_meals = []
    meal_names = ["S√°ng", "Tr∆∞a", "T·ªëi", "Ph·ª•"]
    
    for idx, img in enumerate(images):
        meal_name = meal_names[idx] if idx < len(meal_names) else f"B·ªØa {idx + 1}"
        foods = recognize_food_with_clarifai(img)
        daily_meals.append({"meal_name": f"B·ªØa {meal_name}", "foods": foods})
    
    meals_summary = "\n".join([
        f"- {m['meal_name']}: {', '.join([f['name'] for f in m['foods']])}"
        for m in daily_meals
    ])
    
    prompt = f"""Theo d√µi calo cho ng∆∞·ªùi {health_condition}.
M·ª•c ti√™u: {target_calories} kcal
C√°c b·ªØa ƒÉn: {meals_summary}

Tr·∫£ v·ªÅ:
1. T·ªïng calo ƒë√£ ƒÉn
2. So v·ªõi m·ª•c ti√™u (thi·∫øu/th·ª´a bao nhi√™u)
3. Ph√¢n b·ªë dinh d∆∞·ª°ng
4. G·ª£i √Ω ƒëi·ªÅu ch·ªânh"""
    
    tracking = call_openai_vision(prompt, images, max_tokens=2000)
    
    return {
        "daily_meals": daily_meals,
        "tracking": tracking,
        "target_calories": target_calories
    }


def internal_quick_scan(image):
    detected_foods = recognize_food_with_clarifai(image)
    if not detected_foods:
        return {"error": "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c m√≥n ƒÉn"}
    
    return {"detected_foods": detected_foods, "total": len(detected_foods)}


def internal_meal_suggestion(meal_time, health_condition, dietary_preferences, budget_range, cooking_time):
    prompt = f"""G·ª£i √Ω th·ª±c ƒë∆°n b·ªØa {meal_time}:
- S·ª©c kh·ªèe: {health_condition}
- S·ªü th√≠ch: {dietary_preferences}
- Ng√¢n s√°ch: {budget_range}
- Th·ªùi gian: {cooking_time}

Tr·∫£ v·ªÅ: 2-3 m√≥n Vi·ªát ph√π h·ª£p, l√Ω do ch·ªçn, c√°ch l√†m ƒë∆°n gi·∫£n, ∆∞·ªõc t√≠nh calo"""
    
    result = call_openai_text(prompt, max_tokens=1200)
    return {"suggestion": result, "meal_time": meal_time}


def internal_weekly_menu(health_condition, dietary_preferences, budget_range, cooking_time):
    prompt = f"""L·∫≠p th·ª±c ƒë∆°n 7 ng√†y:
- S·ª©c kh·ªèe: {health_condition}
- S·ªü th√≠ch: {dietary_preferences}
- Ng√¢n s√°ch: {budget_range}/ng√†y
- Th·ªùi gian: {cooking_time}

Format: Th·ª© 2-CN v·ªõi 3 b·ªØa/ng√†y + calo"""
    
    result = call_openai_text(prompt, model="gpt-4o", max_tokens=2500)
    return {"menu": result, "duration": "7 ng√†y"}


def internal_detailed_recipes(days, health_condition, dietary_preferences, budget_range):
    prompt = f"""T·∫°o c√¥ng th·ª©c chi ti·∫øt {days} ng√†y:
- S·ª©c kh·ªèe: {health_condition}
- S·ªü th√≠ch: {dietary_preferences}
- Ng√¢n s√°ch: {budget_range}

M·ªói m√≥n: nguy√™n li·ªáu, b∆∞·ªõc l√†m, calo, chi ph√≠"""
    
    result = call_openai_text(prompt, model="gpt-4o", max_tokens=3000)
    return {"recipes": result, "days": days}


@app.route('/api/agent', methods=['POST'])
def ai_agent():
    try:
        data = request.json
        message = data.get("message", "").strip()
        images = data.get("images", [])
        session_id = data.get("session_id", str(uuid.uuid4()))
        user_id = data.get("user_id")
        auto_execute = data.get("auto_execute", True)
        
        if not message:
            return jsonify({"error": "Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"}), 400
        
        if session_id not in conversations:
            conversations[session_id] = []
        conversation_history = conversations[session_id]
        
        user_profile = user_profiles.get(user_id) if user_id else None
        
        intent_analysis = analyze_user_intent(message, images, conversation_history)
        
        suggested_params = intent_analysis.get("suggested_params", {})
        
        if user_profile:
            if "health_condition" not in suggested_params:
                suggested_params["health_condition"] = user_profile.get("health_condition", "kh·ªèe m·∫°nh")
            if "target_calories" not in suggested_params:
                suggested_params["target_calories"] = user_profile.get("target_calories", 2000)
        
        if images:
            if intent_analysis["intent"] in ["analyze_food", "quick_scan"]:
                suggested_params["image"] = images[0]
            elif intent_analysis["intent"] in ["compare_foods", "track_calories"]:
                suggested_params["images"] = images
        
        result = None
        
        if auto_execute:
            missing_info = intent_analysis.get("missing_info", [])
            
            if not missing_info:
                result = execute_function(intent_analysis["intent"], suggested_params)
            else:
                result = {
                    "status": "need_more_info",
                    "message": f"T√¥i c·∫ßn th√™m th√¥ng tin: {', '.join(missing_info)}"
                }
        
        suggestions = []
        
        if result and "error" not in result:
            if intent_analysis["intent"] == "analyze_food":
                suggestions = [
                    "üí° B·∫°n c√≥ mu·ªën so s√°nh v·ªõi m√≥n kh√°c kh√¥ng?",
                    "üìä Ho·∫∑c t√¥i c√≥ th·ªÉ t·∫°o th·ª±c ƒë∆°n tu·∫ßn d·ª±a tr√™n m√≥n n√†y?",
                    "üçΩÔ∏è Mu·ªën bi·∫øt c√°ch l√†m m√≥n n√†y t·ªët h∆°n cho s·ª©c kh·ªèe?"
                ]
            elif intent_analysis["intent"] == "meal_suggestion":
                suggestions = [
                    "üìÖ B·∫°n c√≥ mu·ªën t√¥i l·∫≠p th·ª±c ƒë∆°n c·∫£ tu·∫ßn kh√¥ng?",
                    "üìñ Ho·∫∑c t√¥i c√≥ th·ªÉ ƒë∆∞a c√¥ng th·ª©c chi ti·∫øt?",
                    "üéØ Mu·ªën ƒëi·ªÅu ch·ªânh theo m·ª•c ti√™u c·ª• th·ªÉ?"
                ]
        else:
            suggestions = intent_analysis.get("next_suggestions", [
                "ü§î B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th√™m chi ti·∫øt kh√¥ng?",
                "üì∏ Ho·∫∑c g·ª≠i ·∫£nh ƒë·ªÉ t√¥i ph√¢n t√≠ch chi ti·∫øt h∆°n?"
            ])
        
        conversation_history.append({
            "role": "user",
            "content": message,
            "has_images": len(images) > 0
        })
        conversation_history.append({
            "role": "assistant",
            "intent": intent_analysis["intent"],
            "result": result
        })
        
        return jsonify({
            "success": True,
            "session_id": session_id,
            "intent_analysis": {
                "intent": intent_analysis["intent"],
                "confidence": intent_analysis["confidence"],
                "explanation": intent_analysis["explanation"],
                "alternative_actions": intent_analysis.get("alternative_actions", []),
                "missing_info": intent_analysis.get("missing_info", [])
            },
            "result": result,
            "suggestions": suggestions,
            "executed": auto_execute and result is not None
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/agent/suggest', methods=['POST'])
def agent_suggest_only():
    try:
        data = request.json
        message = data.get("message", "").strip()
        images = data.get("images", [])
        session_id = data.get("session_id")
        
        conversation_history = conversations.get(session_id, []) if session_id else []
        
        intent_analysis = analyze_user_intent(message, images, conversation_history)
        
        response_message = f"""ü§ñ **T√¥i hi·ªÉu b·∫°n mu·ªën: {intent_analysis['explanation']}**

T√¥i ƒë·ªÅ xu·∫•t d√πng ch·ª©c nƒÉng: **{intent_analysis['intent']}**
ƒê·ªô t·ª± tin: {int(intent_analysis['confidence'] * 100)}%

üìã **C√°c b∆∞·ªõc th·ª±c hi·ªán:**"""
        
        function_info = next((f for f in AVAILABLE_FUNCTIONS if f["name"] == intent_analysis["intent"]), None)
        if function_info:
            required_params = function_info["parameters"].get("required", [])
            for param in required_params:
                response_message += f"\n- {param}: {'‚úÖ ƒê√£ c√≥' if param in intent_analysis['suggested_params'] else '‚ùå C·∫ßn b·ªï sung'}"
        
        if intent_analysis.get("alternative_actions"):
            response_message += f"\n\nüí° **Ho·∫∑c b·∫°n c√≥ th·ªÉ:**"
            for alt in intent_analysis["alternative_actions"][:3]:
                alt_func = next((f for f in AVAILABLE_FUNCTIONS if f["name"] == alt), None)
                if alt_func:
                    response_message += f"\n- {alt}: {alt_func['description']}"
        
        return jsonify({
            "success": True,
            "intent_analysis": intent_analysis,
            "message": response_message,
            "can_execute": len(intent_analysis.get("missing_info", [])) == 0
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/agent/multi-step', methods=['POST'])
def agent_multi_step():
    try:
        data = request.json
        workflow_name = data.get("workflow", "complete_analysis")
        images = data.get("images", [])
        user_preferences = data.get("user_preferences", {})
        
        results = []
        
        if workflow_name == "complete_analysis" and images:
            scan_result = internal_quick_scan(images[0])
            results.append({"step": 1, "action": "quick_scan", "result": scan_result})
            
            analysis_result = internal_analyze_food(
                images[0],
                user_preferences.get("health_condition", "kh·ªèe m·∫°nh"),
                user_preferences.get("dietary_goals", "duy tr√¨ c√¢n n·∫∑ng")
            )
            results.append({"step": 2, "action": "analyze_food", "result": analysis_result})
            
            suggestion_result = internal_meal_suggestion(
                "tr∆∞a",
                user_preferences.get("health_condition", "kh·ªèe m·∫°nh"),
                "t∆∞∆°ng t·ª± m√≥n v·ª´a ph√¢n t√≠ch",
                user_preferences.get("budget_range", "100k"),
                "30 ph√∫t"
            )
            results.append({"step": 3, "action": "meal_suggestion", "result": suggestion_result})
        
        elif workflow_name == "daily_tracking" and images:
            tracking_result = internal_track_calories(
                images,
                user_preferences.get("target_calories", 2000),
                user_preferences.get("health_condition", "kh·ªèe m·∫°nh")
            )
            results.append({"step": 1, "action": "track_calories", "result": tracking_result})
            
            suggestion_result = internal_meal_suggestion(
                "t·ªëi",
                user_preferences.get("health_condition", "kh·ªèe m·∫°nh"),
                "c√¢n b·∫±ng v·ªõi c√°c b·ªØa ƒë√£ ƒÉn",
                user_preferences.get("budget_range", "100k"),
                "30 ph√∫t"
            )
            results.append({"step": 2, "action": "meal_suggestion", "result": suggestion_result})
        
        elif workflow_name == "meal_planning":
            suggestion_result = internal_meal_suggestion(
                user_preferences.get("meal_time", "tr∆∞a"),
                user_preferences.get("health_condition", "kh·ªèe m·∫°nh"),
                user_preferences.get("dietary_preferences", "kh√¥ng"),
                user_preferences.get("budget_range", "100k"),
                "30 ph√∫t"
            )
            results.append({"step": 1, "action": "meal_suggestion", "result": suggestion_result})
            
            recipes_result = internal_detailed_recipes(
                3,
                user_preferences.get("health_condition", "kh·ªèe m·∫°nh"),
                user_preferences.get("dietary_preferences", "kh√¥ng"),
                user_preferences.get("budget_range", "500k")
            )
            results.append({"step": 2, "action": "detailed_recipes", "result": recipes_result})
            
            menu_result = internal_weekly_menu(
                user_preferences.get("health_condition", "kh·ªèe m·∫°nh"),
                user_preferences.get("dietary_preferences", "kh√¥ng"),
                user_preferences.get("budget_range", "500k"),
                "45 ph√∫t"
            )
            results.append({"step": 3, "action": "weekly_menu", "result": menu_result})
        
        return jsonify({
            "success": True,
            "workflow": workflow_name,
            "total_steps": len(results),
            "results": results,
            "summary": f"ƒê√£ ho√†n th√†nh {len(results)} b∆∞·ªõc trong workflow '{workflow_name}'"
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({
        "status": "OK",
        "message": "AI Agent Nutrition API is running!",
        "version": "2.0 - AI Agent",
        "endpoints": {
            "ai_agent": [
                "/api/agent",
                "/api/agent/suggest",
                "/api/agent/multi-step"
            ],
            "standard": [
                "/api/chat",
                "/api/analyze-food",
                "/api/compare-foods",
                "/api/track-calories",
                "/api/quick-scan",
                "/api/meal-suggestion",
                "/api/weekly-menu",
                "/api/detailed-recipes",
                "/api/user/profile"
            ]
        }
    }), 200


@app.route('/api/chat', methods=['POST'])
def chat():
    try:
        data = request.json
        message = data.get("message", "").strip()
        session_id = data.get("session_id", str(uuid.uuid4()))
        use_agent = data.get("use_agent", False)
        
        if not message:
            return jsonify({"error": "Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"}), 400
        
        if use_agent:
            return ai_agent()
        
        if session_id not in conversations:
            conversations[session_id] = []
        
        history = conversations[session_id]
        messages = [{"role": "system", "content": AGENT_SYSTEM_PROMPT}]
        messages.extend(history[-10:])
        messages.append({"role": "user", "content": message})
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            max_tokens=1500,
            temperature=0.7
        )
        
        bot_reply = response.choices[0].message.content.strip()
        
        history.append({"role": "user", "content": message})
        history.append({"role": "assistant", "content": bot_reply})
        
        return jsonify({"reply": bot_reply, "session_id": session_id}), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/analyze-food', methods=['POST'])
def analyze_food():
    try:
        data = request.json
        result = internal_analyze_food(
            data.get("image"),
            data.get("health_condition", "kh·ªèe m·∫°nh"),
            data.get("dietary_goals", "duy tr√¨ c√¢n n·∫∑ng")
        )
        
        if "error" in result:
            return jsonify(result), 400
        
        return jsonify({"success": True, **result}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/compare-foods', methods=['POST'])
def compare_foods():
    try:
        data = request.json
        images = data.get("images", [])
        
        if len(images) < 2:
            return jsonify({"error": "C·∫ßn √≠t nh·∫•t 2 ·∫£nh"}), 400
        
        result = internal_compare_foods(images, data.get("health_condition", "kh·ªèe m·∫°nh"))
        
        return jsonify({"success": True, **result}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/track-calories', methods=['POST'])
def track_calories():
    try:
        data = request.json
        images = data.get("images", [])
        
        if not images:
            return jsonify({"error": "Ch∆∞a c√≥ ·∫£nh"}), 400
        
        result = internal_track_calories(
            images,
            data.get("target_calories", 2000),
            data.get("health_condition", "kh·ªèe m·∫°nh")
        )
        
        return jsonify({"success": True, **result}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/quick-scan', methods=['POST'])
def quick_scan():
    try:
        data = request.json
        result = internal_quick_scan(data.get("image"))
        
        if "error" in result:
            return jsonify(result), 400
        
        return jsonify({"success": True, **result}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/meal-suggestion', methods=['POST'])
def meal_suggestion():
    try:
        data = request.json
        result = internal_meal_suggestion(
            data.get("meal_time", "tr∆∞a"),
            data.get("health_condition", "kh·ªèe m·∫°nh"),
            data.get("dietary_preferences", "kh√¥ng"),
            data.get("budget_range", "100k"),
            data.get("cooking_time", "30 ph√∫t")
        )
        
        return jsonify(result), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/weekly-menu', methods=['POST'])
def weekly_menu():
    try:
        data = request.json
        result = internal_weekly_menu(
            data.get("health_condition", "kh·ªèe m·∫°nh"),
            data.get("dietary_preferences", "kh√¥ng"),
            data.get("budget_range", "500k"),
            data.get("cooking_time", "45 ph√∫t")
        )
        
        return jsonify(result), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/detailed-recipes', methods=['POST'])
def detailed_recipes():
    try:
        data = request.json
        result = internal_detailed_recipes(
            data.get("days", 3),
            data.get("health_condition", "kh·ªèe m·∫°nh"),
            data.get("dietary_preferences", "kh√¥ng"),
            data.get("budget_range", "500k")
        )
        
        return jsonify(result), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/user/profile', methods=['POST'])
def save_user_profile():
    try:
        data = request.json
        user_id = data.get("user_id", str(uuid.uuid4()))
        
        user_profiles[user_id] = {
            "name": data.get("name"),
            "age": data.get("age"),
            "weight": data.get("weight"),
            "height": data.get("height"),
            "health_condition": data.get("health_condition", "kh·ªèe m·∫°nh"),
            "dietary_preferences": data.get("dietary_preferences", []),
            "allergies": data.get("allergies", []),
            "target_calories": data.get("target_calories", 2000),
            "activity_level": data.get("activity_level", "v·ª´a ph·∫£i")
        }
        
        return jsonify({"message": "L∆∞u th√¥ng tin th√†nh c√¥ng", "user_id": user_id}), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/user/profile/<user_id>', methods=['GET'])
def get_user_profile(user_id):
    if user_id not in user_profiles:
        return jsonify({"error": "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"}), 404
    
    return jsonify(user_profiles[user_id]), 200


@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Endpoint kh√¥ng t·ªìn t·∫°i"}), 404


@app.errorhandler(500)
def internal_error(error):
    return jsonify({"error": "L·ªói server"}), 500


if __name__ == "__main__":
    app.run(debug=True)