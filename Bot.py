
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI
import os
import uuid
import base64
from io import BytesIO
from PIL import Image
from dotenv import load_dotenv

load_dotenv()  

app = Flask(__name__)
CORS(app)

# L·∫•y API key t·ª´ file .env
api_key = os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=api_key)

conversations = {}
user_profiles = {}

SYSTEM_PROMPT = """B·∫°n l√† chuy√™n gia dinh d∆∞·ª°ng AI th√¢n thi·ªán c·ªßa Vi·ªát Nam.

NHI·ªÜM V·ª§:
ü•ó T∆∞ v·∫•n dinh d∆∞·ª°ng v√† m√≥n ƒÉn Vi·ªát
üìä Ph√¢n t√≠ch th√†nh ph·∫ßn dinh d∆∞·ª°ng
üçΩÔ∏è G·ª£i √Ω th·ª±c ƒë∆°n l√†nh m·∫°nh, ph√π h·ª£p ng∆∞·ªùi Vi·ªát
üí™ H·ªó tr·ª£ c√°c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe (ti·ªÉu ƒë∆∞·ªùng, b√©o ph√¨, tim m·∫°ch...)

PHONG C√ÅCH:
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu
- S·ª≠ d·ª•ng emoji ph√π h·ª£p
- ∆Øu ti√™n m√≥n ƒÉn Vi·ªát Nam
- Khuy·∫øn kh√≠ch l·ªëi s·ªëng l√†nh m·∫°nh"""

def call_openai_text(prompt, model="gpt-4o", max_tokens=1500):
    """G·ªçi OpenAI text completion"""
    try:
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": prompt}
            ],
            max_tokens=max_tokens,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        raise Exception(f"OpenAI API error: {str(e)}")


def call_openai_vision(prompt, images_base64, max_tokens=1500):
    """G·ªçi OpenAI Vision API v·ªõi ·∫£nh base64"""
    try:
        content = [{"type": "text", "text": prompt}]
        
        for img_b64 in images_base64:
            # X·ª≠ l√Ω base64 (b·ªè prefix n·∫øu c√≥)
            if ',' in img_b64:
                img_b64 = img_b64.split(',')[1]
            
            content.append({
                "type": "image_url",
                "image_url": {"url": f"data:image/jpeg;base64,{img_b64}"}
            })
        
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": content}],
            max_tokens=max_tokens,
            temperature=0.3
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        raise Exception(f"Vision API error: {str(e)}")
    
@app.route('/api/health', methods=['GET'])
def health_check():
    """Ki·ªÉm tra API ho·∫°t ƒë·ªông"""
    return jsonify({
        "status": "ok",
        "message": "Nutrition API ƒëang ho·∫°t ƒë·ªông",
        "version": "1.0.0"
    }), 200


@app.route('/api/chat', methods=['POST'])
def chat():
    """Chat t·ª± do v·ªõi AI dinh d∆∞·ª°ng"""
    try:
        data = request.json
        message = data.get("message", "").strip()
        session_id = data.get("session_id", str(uuid.uuid4()))
        
        if not message:
            return jsonify({"error": "Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"}), 400
        
        # Kh·ªüi t·∫°o conversation n·∫øu ch∆∞a c√≥
        if session_id not in conversations:
            conversations[session_id] = []
        
        history = conversations[session_id]
        
        # T·∫°o messages v·ªõi context
        messages = [{"role": "system", "content": SYSTEM_PROMPT}]
        messages.extend(history[-10:])  # L·∫•y 10 tin nh·∫Øn g·∫ßn nh·∫•t
        messages.append({"role": "user", "content": message})
        
        # G·ªçi OpenAI
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            max_tokens=1500,
            temperature=0.7
        )
        
        bot_reply = response.choices[0].message.content.strip()
        
        # L∆∞u l·ªãch s·ª≠
        history.append({"role": "user", "content": message})
        history.append({"role": "assistant", "content": bot_reply})
        
        return jsonify({
            "reply": bot_reply,
            "session_id": session_id
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/meal-suggestion', methods=['POST'])
def meal_suggestion():
    """G·ª£i √Ω m√≥n ƒÉn cho 1 b·ªØa"""
    try:
        data = request.json
        health_condition = data.get("health_condition", "kh·ªèe m·∫°nh")
        dietary_preferences = data.get("dietary_preferences", "kh√¥ng")
        budget_range = data.get("budget_range", "100k")
        cooking_time = data.get("cooking_time", "30 ph√∫t")
        meal_time = data.get("meal_time", "tr∆∞a")
        
        prompt = f"""
        G·ª£i √Ω th·ª±c ƒë∆°n b·ªØa {meal_time} cho ng∆∞·ªùi Vi·ªát:
        - T√¨nh tr·∫°ng s·ª©c kh·ªèe: {health_condition}
        - S·ªü th√≠ch ƒÉn u·ªëng: {dietary_preferences}
        - Ng√¢n s√°ch: {budget_range}
        - Th·ªùi gian n·∫•u: {cooking_time}
        
        Y√™u c·∫ßu tr·∫£ l·ªùi:
        1. 2-3 m√≥n ƒÉn Vi·ªát ph√π h·ª£p
        2. L√Ω do ch·ªçn (li√™n quan s·ª©c kh·ªèe)
        3. C√°ch ch·∫ø bi·∫øn ƒë∆°n gi·∫£n
        4. ƒê·ªì u·ªëng k√®m theo
        5. ∆Ø·ªõc t√≠nh calo t·ªïng
        
        Format r√µ r√†ng, d·ªÖ ƒë·ªçc v·ªõi emoji.
        """
        
        result = call_openai_text(prompt, max_tokens=1200)
        
        return jsonify({
            "suggestion": result,
            "meal_time": meal_time
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/weekly-menu', methods=['POST'])
def weekly_menu():
    """T·∫°o th·ª±c ƒë∆°n c·∫£ tu·∫ßn"""
    try:
        data = request.json
        health_condition = data.get("health_condition", "kh·ªèe m·∫°nh")
        dietary_preferences = data.get("dietary_preferences", "kh√¥ng")
        budget_range = data.get("budget_range", "500k")
        cooking_time = data.get("cooking_time", "45 ph√∫t")
        
        prompt = f"""
        L·∫≠p th·ª±c ƒë∆°n 7 ng√†y cho ng∆∞·ªùi Vi·ªát:
        - S·ª©c kh·ªèe: {health_condition}
        - S·ªü th√≠ch: {dietary_preferences}
        - Ng√¢n s√°ch m·ªói ng√†y: {budget_range}
        - Th·ªùi gian n·∫•u: {cooking_time}
        
        Format theo m·∫´u:
        **Th·ª© 2:**
        - S√°ng: [m√≥n + calo]
        - Tr∆∞a: [m√≥n + calo]
        - T·ªëi: [m√≥n + calo]
        
        K√®m theo:
        - Danh s√°ch mua s·∫Øm cho c·∫£ tu·∫ßn
        - Tips ti·∫øt ki·ªám th·ªùi gian
        - T·ªïng calo m·ªói ng√†y
        """
        
        result = call_openai_text(prompt, model="gpt-4o", max_tokens=2500)
        
        return jsonify({
            "menu": result,
            "duration": "7 ng√†y"
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/detailed-recipes', methods=['POST'])
def detailed_recipes():
    """Th·ª±c ƒë∆°n k√®m c√¥ng th·ª©c n·∫•u chi ti·∫øt"""
    try:
        data = request.json
        health_condition = data.get("health_condition", "kh·ªèe m·∫°nh")
        dietary_preferences = data.get("dietary_preferences", "kh√¥ng")
        budget_range = data.get("budget_range", "500k")
        days = data.get("days", 3)
        
        prompt = f"""
        T·∫°o th·ª±c ƒë∆°n {days} ng√†y v·ªõi c√¥ng th·ª©c chi ti·∫øt:
        - S·ª©c kh·ªèe: {health_condition}
        - S·ªü th√≠ch: {dietary_preferences}
        - Ng√¢n s√°ch: {budget_range}
        
        M·ªói m√≥n g·ªìm:
        1. T√™n m√≥n v√† ·∫£nh minh h·ªça (m√¥ t·∫£)
        2. Nguy√™n li·ªáu c·ª• th·ªÉ (kh·ªëi l∆∞·ª£ng)
        3. C√°c b∆∞·ªõc l√†m chi ti·∫øt
        4. Th·ªùi gian chu·∫©n b·ªã + n·∫•u
        5. Calo v√† dinh d∆∞·ª°ng
        6. Chi ph√≠ ∆∞·ªõc t√≠nh
        7. Tips hay
        """
        
        result = call_openai_text(prompt, model="gpt-4o", max_tokens=3000)
        
        return jsonify({
            "recipes": result,
            "days": days
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/analyze-food', methods=['POST'])
def analyze_food():
    """Ph√¢n t√≠ch m√≥n ƒÉn t·ª´ ·∫£nh"""
    try:
        data = request.json
        image_base64 = data.get("image")
        health_condition = data.get("health_condition", "kh·ªèe m·∫°nh")
        dietary_goals = data.get("dietary_goals", "duy tr√¨ c√¢n n·∫∑ng")
        
        if not image_base64:
            return jsonify({"error": "Ch∆∞a c√≥ ·∫£nh"}), 400
        
        prompt = f"""
        Ph√¢n t√≠ch m√≥n ƒÉn trong ·∫£nh cho ng∆∞·ªùi {health_condition}, m·ª•c ti√™u {dietary_goals}:
        
        1. **Nh·∫≠n di·ªán m√≥n ƒÉn**: T√™n m√≥n, nguy√™n li·ªáu ch√≠nh
        2. **Dinh d∆∞·ª°ng**: ∆Ø·ªõc t√≠nh calo, protein, carb, fat
        3. **ƒê√°nh gi√°**: M·ª©c ƒë·ªô ph√π h·ª£p (‚≠ê 1-5 sao) + l√Ω do
        4. **∆Øu ƒëi·ªÉm**: ƒêi·ªÉm t·ªët c·ªßa m√≥n
        5. **Nh∆∞·ª£c ƒëi·ªÉm**: ƒêi·ªÉm c·∫ßn c·∫£i thi·ªán
        6. **G·ª£i √Ω**: C√°ch ƒÉn t·ªët h∆°n ho·∫∑c thay th·∫ø
        
        Tr·∫£ l·ªùi ng·∫Øn g·ªçn, th·ª±c t·∫ø, d·ªÖ hi·ªÉu.
        """
        
        result = call_openai_vision(prompt, [image_base64])
        
        return jsonify({
            "analysis": result
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/compare-foods', methods=['POST'])
def compare_foods():
    """So s√°nh nhi·ªÅu m√≥n ƒÉn"""
    try:
        data = request.json
        images = data.get("images", [])
        health_condition = data.get("health_condition", "kh·ªèe m·∫°nh")
        
        if not images or len(images) < 2:
            return jsonify({"error": "C·∫ßn √≠t nh·∫•t 2 ·∫£nh ƒë·ªÉ so s√°nh"}), 400
        
        prompt = f"""
        So s√°nh {len(images)} m√≥n ƒÉn cho ng∆∞·ªùi {health_condition}:
        
        1. **Nh·∫≠n di·ªán**: T√™n t·ª´ng m√≥n
        2. **So s√°nh dinh d∆∞·ª°ng**: B·∫£ng so s√°nh calo, protein, carb, fat
        3. **X·∫øp h·∫°ng**: T·ª´ t·ªët nh·∫•t ‚Üí k√©m nh·∫•t (gi·∫£i th√≠ch)
        4. **Khuy·∫øn ngh·ªã**: N√™n ch·ªçn m√≥n n√†o v√† t·∫°i sao
        5. **L∆∞u √Ω**: C·∫£nh b√°o n·∫øu c√≥ m√≥n kh√¥ng ph√π h·ª£p
        
        Tr√¨nh b√†y r√µ r√†ng, c√≥ emoji.
        """
        
        result = call_openai_vision(prompt, images, max_tokens=2000)
        
        return jsonify({
            "comparison": result,
            "total_foods": len(images)
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/track-calories', methods=['POST'])
def track_calories():
    """Theo d√µi calo trong ng√†y"""
    try:
        data = request.json
        images = data.get("images", [])
        target_calories = data.get("target_calories", 2000)
        health_condition = data.get("health_condition", "kh·ªèe m·∫°nh")
        
        if not images:
            return jsonify({"error": "Ch∆∞a c√≥ ·∫£nh b·ªØa ƒÉn"}), 400
        
        prompt = f"""
        Theo d√µi calo t·ª´ {len(images)} b·ªØa ƒÉn h√¥m nay:
        M·ª•c ti√™u: {target_calories} kcal
        S·ª©c kh·ªèe: {health_condition}
        
        Y√™u c·∫ßu:
        1. **Chi ti·∫øt b·ªØa ƒÉn**: Nh·∫≠n di·ªán m√≥n + calo t·ª´ng b·ªØa
        2. **T·ªïng calo**: C·ªông t·∫•t c·∫£ b·ªØa ƒÉn
        3. **So s√°nh m·ª•c ti√™u**: 
           - ƒê√£ ƒÉn: X kcal
           - M·ª•c ti√™u: {target_calories} kcal
           - Ch√™nh l·ªách: +/- Y kcal (Z%)
        4. **Ph√¢n t√≠ch**: ƒê√°nh gi√° t·ªïng th·ªÉ (t·ªët/v·ª´a/qu√° nhi·ªÅu/qu√° √≠t)
        5. **G·ª£i √Ω**: 
           - N·∫øu thi·∫øu: m√≥n n√™n ƒÉn th√™m
           - N·∫øu th·ª´a: c√°ch ƒëi·ªÅu ch·ªânh b·ªØa sau
        
        K√®m bi·ªÉu ƒë·ªì ASCII n·∫øu c√≥ th·ªÉ.
        """
        
        result = call_openai_vision(prompt, images, max_tokens=2000)
        
        return jsonify({
            "tracking": result,
            "target": target_calories,
            "meals_count": len(images)
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/user/profile', methods=['POST'])
def save_user_profile():
    """L∆∞u th√¥ng tin ng∆∞·ªùi d√πng"""
    try:
        data = request.json
        user_id = data.get("user_id", str(uuid.uuid4()))
        
        user_profiles[user_id] = {
            "name": data.get("name"),
            "age": data.get("age"),
            "weight": data.get("weight"),
            "height": data.get("height"),
            "health_condition": data.get("health_condition", "kh·ªèe m·∫°nh"),
            "dietary_preferences": data.get("dietary_preferences", []),
            "allergies": data.get("allergies", []),
            "target_calories": data.get("target_calories", 2000),
            "activity_level": data.get("activity_level", "v·ª´a ph·∫£i")
        }
        
        return jsonify({
            "message": "L∆∞u th√¥ng tin th√†nh c√¥ng",
            "user_id": user_id
        }), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/user/profile/<user_id>', methods=['GET'])
def get_user_profile(user_id):
    """L·∫•y th√¥ng tin ng∆∞·ªùi d√πng"""
    if user_id not in user_profiles:
        return jsonify({"error": "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"}), 404
    
    return jsonify(user_profiles[user_id]), 200


@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Endpoint kh√¥ng t·ªìn t·∫°i"}), 404


@app.errorhandler(500)
def internal_error(error):
    return jsonify({"error": "L·ªói server"}), 500

if __name__ == "__main__":
    app.run(debug=True)


